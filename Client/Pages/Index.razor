@page "/"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>ポケモンバトルサポート</PageTitle>
@if (pokeNames == null)
{
    <MudText>Loading...</MudText>
}
else
{
    @* ポケモン選択画面 *@
    <MudGrid Class="px-16 py-10">
        @* 自分 *@
        <MudItem xs="12" sm="7">
            <MudText Typo="Typo.h5" Class="mb-4">自分のパーティ</MudText>
            <MudGrid>
                @foreach (var pokeInfo in myParty)
                {
                    <MudItem xs="12" sm="4">
                        <MudAutocomplete T="string" Label="ポケモン" Value="@pokeInfo.Name" ValueChanged="@( async(value) => await HandlePokeSelected(value, pokeInfo, Common.PartyOwner.I))" SearchFunc="@( async(value) => HandlePokeSearchFunc(value))" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" />
                    </MudItem>
                    <MudItem xs="12" sm="3">
                            <PokeImageView PokeNo="@pokeInfo.No" Width="50" Height="50" />
                            <PokeTypeView PokeType="@pokeInfo.FirstType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                            <PokeTypeView PokeType="@pokeInfo.SecondType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudStack Row="true">
                            <MudRadioGroup T="Common.SpeedRank" SelectedOption="@pokeInfo.SpeedRank" SelectedOptionChanged="@( async(value) => await HandleSpeedRankChanged(value, pokeInfo))">
                                <MudRadio Option="@(Common.SpeedRank.Fastest)" Dense="true" Color="Color.Primary">最速</MudRadio>
                                <MudRadio Option="@(Common.SpeedRank.Fast)" Dense="true" Color="Color.Primary">準速</MudRadio>
                                <MudRadio Option="@(Common.SpeedRank.Default)" Dense="true" Color="Color.Primary">無振</MudRadio>
                            </MudRadioGroup>
                            <MudCheckBox T="bool" Checked="@(pokeInfo.BattleItem == Common.BattleItem.ChoiceScarf ? true : false)" Label="こだわりスカーフ" Color="Color.Warning" Dense="true" CheckedChanged="@(async(value) => await HandleScarfChanged(value, pokeInfo))"></MudCheckBox>
                        </MudStack>
                    </MudItem>
                }
            </MudGrid>
            <MudButton Class="mt-10" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => HandleClearClicked(Common.PartyOwner.I))">パーティのクリア</MudButton>
        </MudItem>
        @* 相手 *@
        <MudItem xs="12" sm="5">
            <MudText Typo="Typo.h5" Class="mb-1">相手のパーティ</MudText>
            <MudGrid>
                @foreach (var pokeInfo in yourParty)
                {
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="string" Label="ポケモン" Value="@pokeInfo.Name" ValueChanged="@( async(value) => await HandlePokeSelected(value, pokeInfo, Common.PartyOwner.You))" SearchFunc="@( async(value) => HandlePokeSearchFunc(value))" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <PokeImageView PokeNo="@pokeInfo.No" Width="50" Height="50" />
                        <PokeTypeView PokeType="@pokeInfo.FirstType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                        <PokeTypeView PokeType="@pokeInfo.SecondType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                    </MudItem>
                }
            </MudGrid>
            <MudButton Class="mt-10" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => HandleClearClicked(Common.PartyOwner.You))">パーティのクリア</MudButton>
        </MudItem>            
    </MudGrid>
}

@code {
    /// <summary>
    /// 全てのポケモンの名前のリスト
    /// </summary>
    private string[] pokeNames = Array.Empty<string>();

    /// <summary>
    /// 自分のパーティ
    /// </summary>
    private PokeInfoModel[] myParty = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// 相手のパーティ
    /// </summary>
    private PokeInfoModel[] yourParty = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // 全てのポケモンの名前を取得
        pokeNames = await Http.GetFromJsonAsync<string[]>("api/Poke/Names") ?? Array.Empty<string>();

        // Session Storageからパーティ情報の読み込み
        myParty = await sessionStorage.GetItemAsync<PokeInfoModel[]>("myParty") ?? new PokeInfoModel[6] { new (), new (), new (), new (), new (), new () };
        yourParty = await sessionStorage.GetItemAsync<PokeInfoModel[]>("yourParty") ?? new PokeInfoModel[6] { new (), new (), new (), new (), new (), new () };
    }

    /// <summary>
    /// ポケコンボボックスのリスト表示をするためのコールバック用
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private IEnumerable<string> HandlePokeSearchFunc(string value)
    {
        // テキストがなければ一覧を全て返す。あれば一致するものを抽出して返す。
        if (string.IsNullOrEmpty(value))
        {
            return pokeNames;
        }
        else
        {
            return pokeNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }       
    }

    /// <summary>
    /// ポケコンボボックスで選択されたときのイベントコールバック用
    /// </summary>
    /// <param name="selectedValue"></param>
    /// <param name="pokeInfo"></param>
    /// <returns></returns>
    private async Task HandlePokeSelected(string selectedValue, PokeInfoModel pokeInfo, Common.PartyOwner partyOwner)
    {
        // 選択された名前をセット
        pokeInfo.Name = selectedValue;

        // その他の情報をセット
        if (string.IsNullOrEmpty(pokeInfo.Name))
        {
            // 初期化
            pokeInfo.No = 0;
            pokeInfo.FirstType = string.Empty;
            pokeInfo.SecondType = string.Empty;
            pokeInfo.H = 0;
            pokeInfo.A = 0;
            pokeInfo.B = 0;
            pokeInfo.C = 0;
            pokeInfo.D = 0;
            pokeInfo.S = 0;
            pokeInfo.Total = 0;
        }
        else
        {
            // 基本情報を取得
            var typesUrl = $"api/Poke/{pokeInfo.Name}";
            PokeSimpleInfoModel? types = await Http.GetFromJsonAsync<PokeSimpleInfoModel>(typesUrl);
            if (types is not null)
            {
                pokeInfo.No = types.No;
                pokeInfo.FirstType = types.FirstType;
                pokeInfo.SecondType = types.SecondType;
            }

            // 種族値を取得
            var baseStatsParameters = new Dictionary<string, string>()
                {
                    ["generation"] = Common.CurrentGeneration.ToString()
                };
            var baseStatsUrl = $"api/Poke/{pokeInfo.Name}/BaseStats/?{await new FormUrlEncodedContent(baseStatsParameters).ReadAsStringAsync()}";
            PokeBaseStatsModel? baseStats = await Http.GetFromJsonAsync<PokeBaseStatsModel>(baseStatsUrl);
            if (baseStats is not null)
            {
                pokeInfo.H = baseStats.H;
                pokeInfo.A = baseStats.A;
                pokeInfo.B = baseStats.B;
                pokeInfo.C = baseStats.C;
                pokeInfo.D = baseStats.D;
                pokeInfo.S = baseStats.S;
                pokeInfo.Total = baseStats.Total;
            }
        }

        // パーティ情報をsession storageに保持
        switch (partyOwner)
        {
            case Common.PartyOwner.I:
                await sessionStorage.SetItemAsync("myParty", myParty);
                break;

            case Common.PartyOwner.You:
                await sessionStorage.SetItemAsync("yourParty", yourParty);
                break;
        }
    }

    /// <summary>
    /// パーティクリアボタンが押された時のコールバック用
    /// </summary>
    /// <returns></returns>
    private void HandleClearClicked(Common.PartyOwner partyOwner)
    {
        // パーティ情報をクリアしてsession storageに保持
        switch (partyOwner)
        {
            case Common.PartyOwner.I:
                myParty = new PokeInfoModel[6] { new(), new(), new(), new(), new(), new() };
                sessionStorage.SetItemAsync("myParty", myParty);
                break;

            case Common.PartyOwner.You:
                yourParty = new PokeInfoModel[6] { new(), new(), new(), new(), new(), new() };
                sessionStorage.SetItemAsync("yourParty", yourParty);
                break;
        }
    }

    ///  <summary>
    /// S実数値のランクラジオボタンが変わったときのコールバック用
    /// </summary>
    private async Task HandleSpeedRankChanged(Common.SpeedRank selectedValue, PokeInfoModel pokeInfo)
    {
        // 選択された値をセット
        pokeInfo.SpeedRank = selectedValue;

        // パーティ情報をsession storageに保持
        await sessionStorage.SetItemAsync("myParty", myParty);
    }

    /// <summary>
    /// こだわりスカーフチェックボックスのコールバック用
    /// </summary>
    /// <param name="selectedValue"></param>
    /// <param name="pokeInfo"></param>
    /// <returns></returns>
    private async Task HandleScarfChanged(bool checkedScarf, PokeInfoModel pokeInfo)
    {
        // チェック状態をセット
        if (checkedScarf)
        {
            pokeInfo.BattleItem = Common.BattleItem.ChoiceScarf;
        }
        else
        {
            pokeInfo.BattleItem = Common.BattleItem.None;
        }

        // パーティ情報をsession storageに保持
        await sessionStorage.SetItemAsync("myParty", myParty);
    }
}
