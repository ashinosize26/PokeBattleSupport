@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()" Width="100%" Height="400px"></MudChart>

@code {
    /// <summary>
    /// パーティ所有者
    /// </summary>
    [Parameter]
    public Common.PartyOwner PartyOwner { get; set; }

    /// <summary>
    /// パーティ
    /// </summary>
    private PokeInfoModel[] party = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// X軸のラベル
    /// </summary>
    private List<string> XAxisLabels = new List<string>();

    /// <summary>
    /// チャートのデータリスト
    /// </summary>
    private List<ChartSeries> Series = new List<ChartSeries>();

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Session Storageからパーティ情報の読み込み
        switch (PartyOwner)
        {
            case Common.PartyOwner.I:
                party = await sessionStorage.GetItemAsync<PokeInfoModel[]>("myParty") ?? new PokeInfoModel[6] { new(), new(), new(), new(), new(), new() };
                break;

            case Common.PartyOwner.You:
                party = await sessionStorage.GetItemAsync<PokeInfoModel[]>("yourParty") ?? new PokeInfoModel[6] { new(), new(), new(), new(), new(), new() };
                break;
        }

        // 棒グラフのX軸を作成（パーティのポケモン）
        XAxisLabels.Clear();
        foreach (var partyInfo in party)
        {
            // パーティ未選択の場合は非表示とする
            if (string.IsNullOrEmpty(partyInfo.Name))
            {
                continue;
            }

            // ()の前で改行しX軸に追加
            XAxisLabels.Add(partyInfo.Name);
        };

        // 棒グラフのY軸データを作成（ポケモンのS実数値）
        Series.Clear();
        List<double> fastestSpeeds = new List<double>();    // 最速
        List<double> fastSpeeds = new List<double>();       // 準速
        List<double> defaultSpeeds = new List<double>();    // 無振
        foreach (var partyInfo in party)
        {
            // パーティ未選択の場合は非表示とする
            if (string.IsNullOrEmpty(partyInfo.Name))
            {
                continue;
            }

            // S実数値を計算してY軸データに追加
            fastestSpeeds.Add(Common.CalcSpeedRealNumber((int)partyInfo.S, Common.SpeedRank.Fastest));
            fastSpeeds.Add(Common.CalcSpeedRealNumber((int)partyInfo.S, Common.SpeedRank.Fast));
            defaultSpeeds.Add(Common.CalcSpeedRealNumber((int)partyInfo.S, Common.SpeedRank.Default));
        };
        Series.Add(new ChartSeries()
            {
                Name = "最速",
                Data = fastestSpeeds.ToArray()
            });
        Series.Add(new ChartSeries()
            {
                Name = "準速",
                Data = fastSpeeds.ToArray()
            });
        Series.Add(new ChartSeries()
            {
                Name = "無振",
                Data = defaultSpeeds.ToArray()
            });
    }
}