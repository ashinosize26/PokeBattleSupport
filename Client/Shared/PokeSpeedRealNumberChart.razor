@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()" Width="100%" Height="400px"></MudChart>

@code {
    /// <summary>
    /// 自分のパーティ
    /// </summary>
    private PokeInfoModel[] myParty = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// 相手のパーティ
    /// </summary>
    private PokeInfoModel[] yourParty = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// X軸のラベル
    /// </summary>
    private List<string> XAxisLabels = new List<string>();

    /// <summary>
    /// チャートのデータリスト
    /// </summary>
    private List<ChartSeries> Series = new List<ChartSeries>();

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Session Storageからパーティ情報の読み込み
        myParty = await sessionStorage.GetItemAsync<PokeInfoModel[]>("myParty") ?? new PokeInfoModel[6] { new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel() };
        yourParty = await sessionStorage.GetItemAsync<PokeInfoModel[]>("yourParty") ?? new PokeInfoModel[6] { new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel(), new PokeInfoModel() };

        // 棒グラフのX軸ラベル更新（自分のパーティと相手のパーティを並べて表示）
        XAxisLabels.Clear();
        foreach (var item in myParty.Where(x => !string.IsNullOrEmpty(x.Name)))
        {
            XAxisLabels.Add(item.Name);
        };
        foreach (var item in yourParty.Where(x => !string.IsNullOrEmpty(x.Name)))
        {
            XAxisLabels.Add(item.Name);
        };

        // 棒グラフのY軸データ更新
        Series.Clear();
        List<double> fastestSpeeds = new List<double>();    // 最速
        List<double> fastSpeeds = new List<double>();       // 準速
        List<double> defaultSpeeds = new List<double>();    // 無振
        foreach (var item in myParty.Where(x => !string.IsNullOrEmpty(x.Name)))
        {
            fastestSpeeds.Add(Common.CalcSpeedFastest(item.S));
            fastSpeeds.Add(Common.CalcSpeedFast(item.S));
            defaultSpeeds.Add(Common.CalcSpeedDefault(item.S));
        };
        foreach (var item in yourParty.Where(x => !string.IsNullOrEmpty(x.Name)))
        {
            fastestSpeeds.Add(Common.CalcSpeedFastest(item.S));
            fastSpeeds.Add(Common.CalcSpeedFast(item.S));
            defaultSpeeds.Add(Common.CalcSpeedDefault(item.S));
        };
        Series.Add(new ChartSeries()
            {
                Name = "最速",
                Data = fastestSpeeds.ToArray()
            });
        Series.Add(new ChartSeries()
            {
                Name = "準速",
                Data = fastSpeeds.ToArray()
            });
        Series.Add(new ChartSeries()
            {
                Name = "無振",
                Data = defaultSpeeds.ToArray()
            });
    }
}