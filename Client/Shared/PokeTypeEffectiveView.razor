@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<MudTable Items="@elements" Hover="true" Breakpoint="Breakpoint.None" Dense="true" Striped="true" Bordered="true">
    <HeaderContent>
        <MudTh></MudTh>
        @foreach (var pokeInfo in party)
        {
            <MudTh Style="vertical-align: top;">
                <MudStack>
                    <PokeImageView PokeNo="@pokeInfo.No" Width="42" Height="42" />
                    <PokeTypeView PokeType="@pokeInfo.FirstType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                    <PokeTypeView PokeType="@pokeInfo.SecondType" ShowSample="@string.IsNullOrEmpty(pokeInfo.Name)" />
                </MudStack>
            </MudTh>
        }
        <MudTh Style="vertical-align: bottom;">効果抜群</MudTh>
        <MudTh Style="vertical-align: bottom;">いまひとつ</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="AttackTypeName">
            <PokeTypeView PokeType="@context.TypeName" />
        </MudTd>
        @foreach (var (value, index) in party.Select((value, index) => (value, index)))
        {
            <MudTd DataLabel="@($"Poke{index}")">
                <MudText Typo="Typo.h6" Color="@context.Marks[index].MarkColor" Align="Align.Center">@context.Marks[index].MarkText</MudText>
            </MudTd>
        }
        <MudTd DataLabel="SuperEffective">
            <MudText Typo="Typo.body1" Color="@(context.SuperEffectiveCount >= 3 ? Color.Secondary : Color.Default)">@context.SuperEffectiveCount</MudText>
        </MudTd>
        <MudTd DataLabel="WeakAgainst">
            <MudText Typo="Typo.body1" Color="@(context.WeakAgainstCount >= 3 ? Color.Info : Color.Default)">@context.WeakAgainstCount</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    /// <summary>
    /// パーティ所有者
    /// </summary>
    [Parameter]
    public Common.PartyOwner partyOwner { get; set; }

    /// <summary>
    /// パーティ
    /// </summary>
    private PokeInfoModel[] party = Array.Empty<PokeInfoModel>();

    /// <summary>
    /// テーブルデータ
    /// </summary>
    private List<PokeTypeEffectiveViewModel> elements = new();

    /// <summary>
    /// タイプ耐性
    /// </summary>
    private List<PokeTypeEffectiveModel> effectiveList = new();

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Session Storageからパーティ情報の読み込み
        switch (partyOwner)
        {
            case Common.PartyOwner.I:
                party = await sessionStorage.GetItemAsync<PokeInfoModel[]>("myParty") ?? new PokeInfoModel[6] { new (), new (), new (), new (), new (), new () };
                break;

            case Common.PartyOwner.You:
                party = await sessionStorage.GetItemAsync<PokeInfoModel[]>("yourParty") ?? new PokeInfoModel[6] { new (), new (), new (), new (), new (), new () };
                break;
        }

        // パーティの各ポケモンの、攻撃を受けたときの耐性を取得
        foreach (var pokeInfo in party)
        {
            PokeTypeEffectiveModel effective;
            if (string.IsNullOrEmpty(pokeInfo.FirstType) && string.IsNullOrEmpty(pokeInfo.SecondType))
            {
                // ポケモンが未指定の場合
                effective = new PokeTypeEffectiveModel();
            }
            else
            {
                // ポケモンが指定済みの場合
                var parameters = new Dictionary<string, string>()
                    {
                        ["firstType"] = pokeInfo.FirstType,
                        ["secondType"] = pokeInfo.SecondType
                    };
                var url = $"api/PokeType/Effective?{await new FormUrlEncodedContent(parameters).ReadAsStringAsync()}";
                effective = await Http.GetFromJsonAsync<PokeTypeEffectiveModel>(url) ?? new ();
            }
            effectiveList.Add(effective);
        };

        // タイプを行、ポケモンを列にするため、各タイプごとにポケモンの耐性を取得して行を作成
        elements.Clear();
        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "ノーマル",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.NormalEffectiveValue)).ToArray(),   // 耐性（倍率）から表示用のマークを取得
            SuperEffectiveCount = effectiveList.Count(value  => value.NormalEffectiveValue > 1), // 耐性（倍率）が1を超えるポケモンを集計（効果抜群）
            WeakAgainstCount = effectiveList.Count(value  => value.NormalEffectiveValue < 1),    // 耐性（倍率）が1を下回るポケモンを集計（いまひとつ、効果なし）
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "ほのお",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.FireEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.FireEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.FireEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "みず",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.WaterEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.WaterEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.WaterEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "でんき",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.ElectricEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.ElectricEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.ElectricEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "くさ",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.GrassEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.GrassEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.GrassEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "こおり",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.IceEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.IceEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.IceEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "かくとう",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.FightingEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.FightingEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.FightingEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "どく",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.PoisonEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.PoisonEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.PoisonEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "じめん",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.GroundEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.GroundEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.GroundEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "ひこう",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.FlyingEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.FlyingEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.FlyingEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "エスパー",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.PsychicEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.PsychicEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.PsychicEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "むし",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.BugEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.BugEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.BugEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "いわ",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.RockEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.RockEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.RockEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "ゴースト",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.GhostEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.GhostEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.GhostEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "ドラゴン",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.DragonEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.DragonEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.DragonEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "あく",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.DarkEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.DarkEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.DarkEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "はがね",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.SteelEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.SteelEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.SteelEffectiveValue < 1),
        });

        elements.Add(new PokeTypeEffectiveViewModel()
        {
            TypeName = "フェアリー",
            Marks = effectiveList.Select(value  => Common.GetTypeEffectiveMark(value.FairyEffectiveValue)).ToArray(),
            SuperEffectiveCount = effectiveList.Count(value  => value.FairyEffectiveValue > 1),
            WeakAgainstCount = effectiveList.Count(value  => value.FairyEffectiveValue < 1),
        });
    }
}